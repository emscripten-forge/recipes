From 59e40d7ecf81c152d9c710891eef84a53038888e Mon Sep 17 00:00:00 2001
From: serge-sans-paille <sguelton@mozilla.com>
Date: Tue, 8 Jul 2025 14:09:21 +0200
Subject: [PATCH 3/5] Specialize Flang to target WASM

---
 .../Optimizer/Builder/Runtime/RTBuilder.h     | 37 ++++++++++---------
 .../flang/Optimizer/Support/DataLayout.h      | 18 +++++++++
 flang/lib/Optimizer/CodeGen/CodeGen.cpp       |  8 +++-
 3 files changed, 43 insertions(+), 20 deletions(-)

diff --git a/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h b/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h
index eaa1de761..2c776d4ea 100644
--- a/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h
+++ b/flang/include/flang/Optimizer/Builder/Runtime/RTBuilder.h
@@ -22,6 +22,7 @@
 #include "flang/Optimizer/Builder/FIRBuilder.h"
 #include "flang/Optimizer/Dialect/FIRDialect.h"
 #include "flang/Optimizer/Dialect/FIRType.h"
+#include "flang/Optimizer/Support/DataLayout.h"
 #include "flang/Runtime/reduce.h"
 #include "mlir/IR/BuiltinTypes.h"
 #include "mlir/IR/MLIRContext.h"
@@ -85,7 +86,7 @@ using FuncTypeBuilderFunc = mlir::FunctionType (*)(mlir::MLIRContext *);
       auto voidTy = fir::LLVMPointerType::get(                                 \
           context, mlir::IntegerType::get(context, 8));                        \
       auto size_tTy =                                                          \
-          mlir::IntegerType::get(context, 8 * sizeof(std::size_t));            \
+          mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_SIZE_T);     \
       auto refTy = fir::ReferenceType::get(f(context));                        \
       return mlir::FunctionType::get(                                          \
           context, {refTy, size_tTy, refTy, refTy, size_tTy, size_tTy},        \
@@ -113,13 +114,13 @@ static constexpr TypeBuilderFunc getModel();
 template <>
 constexpr TypeBuilderFunc getModel<unsigned int>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(unsigned int));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_UINT);
   };
 }
 template <>
 constexpr TypeBuilderFunc getModel<short int>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(short int));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_SHORT);
   };
 }
 template <>
@@ -136,7 +137,7 @@ constexpr TypeBuilderFunc getModel<const short int *>() {
 template <>
 constexpr TypeBuilderFunc getModel<int>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(int));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_INT);
   };
 }
 template <>
@@ -182,13 +183,13 @@ constexpr TypeBuilderFunc getModel<const char32_t *>() {
 template <>
 constexpr TypeBuilderFunc getModel<char>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(char));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_CHAR);
   };
 }
 template <>
 constexpr TypeBuilderFunc getModel<signed char>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(signed char));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_SCHAR);
   };
 }
 template <>
@@ -205,7 +206,7 @@ constexpr TypeBuilderFunc getModel<const signed char *>() {
 template <>
 constexpr TypeBuilderFunc getModel<char16_t>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(char16_t));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_CHAR16);
   };
 }
 template <>
@@ -218,7 +219,7 @@ constexpr TypeBuilderFunc getModel<char16_t *>() {
 template <>
 constexpr TypeBuilderFunc getModel<char32_t>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(char32_t));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_CHAR32);
   };
 }
 template <>
@@ -231,7 +232,7 @@ constexpr TypeBuilderFunc getModel<char32_t *>() {
 template <>
 constexpr TypeBuilderFunc getModel<unsigned char>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(unsigned char));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_UCHAR);
   };
 }
 template <>
@@ -259,7 +260,7 @@ constexpr TypeBuilderFunc getModel<void **>() {
 template <>
 constexpr TypeBuilderFunc getModel<long>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(long));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_LONG);
   };
 }
 template <>
@@ -280,7 +281,7 @@ constexpr TypeBuilderFunc getModel<const long *>() {
 template <>
 constexpr TypeBuilderFunc getModel<long long>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(long long));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_LONGLONG);
   };
 }
 template <>
@@ -308,13 +309,13 @@ constexpr TypeBuilderFunc getModel<const long long *>() {
 template <>
 constexpr TypeBuilderFunc getModel<unsigned long>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(unsigned long));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_ULONG);
   };
 }
 template <>
 constexpr TypeBuilderFunc getModel<unsigned long long>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
-    return mlir::IntegerType::get(context, 8 * sizeof(unsigned long long));
+    return mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_ULONGLONG);
   };
 }
 template <>
@@ -343,7 +344,7 @@ constexpr TypeBuilderFunc getModel<long double>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
     // See TODO at the top of the file. This is configuring for the host system
     // - it might be incorrect when cross-compiling!
-    constexpr size_t size = sizeof(long double);
+    constexpr size_t size = FLANG_TARGET_SIZEOF_LONGDOUBLE;
     static_assert(size == 16 || size == 10 || size == 8,
                   "unsupported long double size");
     if constexpr (size == 16)
@@ -404,7 +405,7 @@ template <>
 constexpr TypeBuilderFunc getModel<unsigned short>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
     return mlir::IntegerType::get(
-        context, 8 * sizeof(unsigned short),
+        context, 8 * FLANG_TARGET_SIZEOF_USHORT,
         mlir::IntegerType::SignednessSemantics::Unsigned);
   };
 }
@@ -422,7 +423,7 @@ template <>
 constexpr TypeBuilderFunc getModel<unsigned short *>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
     return fir::ReferenceType::get(
-        mlir::IntegerType::get(context, 8 * sizeof(unsigned short)));
+        mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_USHORT));
   };
 }
 template <>
@@ -441,7 +442,7 @@ template <>
 constexpr TypeBuilderFunc getModel<unsigned long *>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
     return fir::ReferenceType::get(
-        mlir::IntegerType::get(context, 8 * sizeof(unsigned long)));
+        mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_ULONG));
   };
 }
 template <>
@@ -452,7 +453,7 @@ template <>
 constexpr TypeBuilderFunc getModel<unsigned long long *>() {
   return [](mlir::MLIRContext *context) -> mlir::Type {
     return fir::ReferenceType::get(
-        mlir::IntegerType::get(context, 8 * sizeof(unsigned long long)));
+        mlir::IntegerType::get(context, 8 * FLANG_TARGET_SIZEOF_ULONGLONG));
   };
 }
 template <>
diff --git a/flang/include/flang/Optimizer/Support/DataLayout.h b/flang/include/flang/Optimizer/Support/DataLayout.h
index 6072425b7..a252dc3af 100644
--- a/flang/include/flang/Optimizer/Support/DataLayout.h
+++ b/flang/include/flang/Optimizer/Support/DataLayout.h
@@ -23,6 +23,24 @@ namespace llvm {
 class DataLayout;
 }
 
+constexpr size_t FLANG_TARGET_SIZEOF_UINT = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_INT = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_SHORT = 2;
+constexpr size_t FLANG_TARGET_SIZEOF_USHORT = 2;
+constexpr size_t FLANG_TARGET_SIZEOF_CHAR = 1;
+constexpr size_t FLANG_TARGET_SIZEOF_SCHAR = 1;
+constexpr size_t FLANG_TARGET_SIZEOF_UCHAR = 1;
+constexpr size_t FLANG_TARGET_SIZEOF_CHAR16 = 2;
+constexpr size_t FLANG_TARGET_SIZEOF_CHAR32 = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_LONG = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_LONGLONG = 8;
+constexpr size_t FLANG_TARGET_SIZEOF_ULONG = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_ULONGLONG = 8;
+constexpr size_t FLANG_TARGET_SIZEOF_SIZE_T = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_FLOAT = 4;
+constexpr size_t FLANG_TARGET_SIZEOF_DOUBLE = 8;
+constexpr size_t FLANG_TARGET_SIZEOF_LONGDOUBLE = 8;
+
 namespace fir::support {
 /// Create an mlir::DataLayoutSpecInterface attribute from an llvm::DataLayout
 /// and set it on the provided mlir::ModuleOp.
diff --git a/flang/lib/Optimizer/CodeGen/CodeGen.cpp b/flang/lib/Optimizer/CodeGen/CodeGen.cpp
index 1b078be7b..40f84e3fb 100644
--- a/flang/lib/Optimizer/CodeGen/CodeGen.cpp
+++ b/flang/lib/Optimizer/CodeGen/CodeGen.cpp
@@ -949,7 +949,8 @@ getMallocInModule(ModuleOp mod, fir::AllocMemOp op,
     return mlir::SymbolRefAttr::get(userMalloc);
 
   mlir::OpBuilder moduleBuilder(mod.getBodyRegion());
-  auto indexType = mlir::IntegerType::get(op.getContext(), 64);
+  auto indexType =
+      mlir::IntegerType::get(op.getContext(), 8 * FLANG_TARGET_SIZEOF_SIZE_T);
   auto mallocDecl = moduleBuilder.create<mlir::LLVM::LLVMFuncOp>(
       op.getLoc(), mallocName,
       mlir::LLVM::LLVMFunctionType::get(getLlvmPtrType(op.getContext()),
@@ -1025,8 +1026,11 @@ struct AllocMemOpConversion : public fir::FIROpConversion<fir::AllocMemOp> {
       size = rewriter.create<mlir::LLVM::MulOp>(
           loc, ity, size, integerCast(loc, rewriter, ity, opnd));
     heap->setAttr("callee", getMalloc(heap, rewriter));
+    auto szt_ty = mlir::IntegerType::get(rewriter.getContext(),
+                                         8 * FLANG_TARGET_SIZEOF_SIZE_T);
+    auto size_szt = integerCast(loc, rewriter, szt_ty, size);
     rewriter.replaceOpWithNewOp<mlir::LLVM::CallOp>(
-        heap, ::getLlvmPtrType(heap.getContext()), size,
+        heap, ::getLlvmPtrType(heap.getContext()), size_szt,
         addLLVMOpBundleAttrs(rewriter, heap->getAttrs(), 1));
     return mlir::success();
   }
