diff --git a/tests/unit/algorithm/distance/DiscreteHausdorffDistanceTest.cpp b/tests/unit/algorithm/distance/DiscreteHausdorffDistanceTest.cpp
index 735344c..4d69d90 100644
--- a/tests/unit/algorithm/distance/DiscreteHausdorffDistanceTest.cpp
+++ b/tests/unit/algorithm/distance/DiscreteHausdorffDistanceTest.cpp
@@ -198,7 +198,8 @@ void object::test<6>
         "LINESTRING (0 0, 100 0, 10 100, 10 100)",
         "LINESTRING (0 100, 0 10, 80 10)", 0.001, 47.89);
 
-    ensure("FE_INVALID raised", !std::fetestexcept(FE_INVALID));
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore
+    //ensure("FE_INVALID raised", !std::fetestexcept(FE_INVALID));
 }
 
 // Crash on collection with empty components
diff --git a/tests/unit/capi/GEOSDistanceTest.cpp b/tests/unit/capi/GEOSDistanceTest.cpp
index 4c953c4..aeaa983 100644
--- a/tests/unit/capi/GEOSDistanceTest.cpp
+++ b/tests/unit/capi/GEOSDistanceTest.cpp
@@ -135,9 +135,10 @@ void object::test<4>
     ensure_equals(status, 1);
     ensure_equals(d, std::sqrt(2));
 
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore
     // check for floating point overflow exceptions
-    int raised = fetestexcept(FE_OVERFLOW);
-    ensure_equals(raised & FE_OVERFLOW, 0);
+    //int raised = fetestexcept(FE_OVERFLOW);
+    //ensure_equals(raised & FE_OVERFLOW, 0);
 
     GEOSGeom_destroy(g1);
     GEOSGeom_destroy(g2);
@@ -152,8 +153,9 @@ void object::test<5>
     GEOSGeometry* g1 = GEOSGeomFromWKT("LINESTRING (0 0, 1 1)");
     GEOSGeometry* g2 = GEOSGeomFromWKT("LINESTRING (2 1, 1 2)");
 
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore
     // clear all floating point exceptions
-    feclearexcept (FE_ALL_EXCEPT);
+    //feclearexcept (FE_ALL_EXCEPT);
 
     double d;
     int status = GEOSDistance(g1, g2, &d);
@@ -161,9 +163,10 @@ void object::test<5>
     ensure_equals(status, 1);
     // ensure_equals(d, std::sqrt(2));
 
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore
     // check for floating point overflow exceptions
-    int raised = fetestexcept(FE_OVERFLOW);
-    ensure_equals(raised & FE_OVERFLOW, 0);
+    //int raised = fetestexcept(FE_OVERFLOW);
+    //ensure_equals(raised & FE_OVERFLOW, 0);
 
     GEOSGeom_destroy(g1);
     GEOSGeom_destroy(g2);
diff --git a/tests/unit/capi/GEOSIntersectionTest.cpp b/tests/unit/capi/GEOSIntersectionTest.cpp
index 94d209e..f1443ae 100644
--- a/tests/unit/capi/GEOSIntersectionTest.cpp
+++ b/tests/unit/capi/GEOSIntersectionTest.cpp
@@ -139,8 +139,9 @@ void object::test<7>
     geom2_ = GEOSGeomFromWKT("POLYGON ((1 2, 1 3, 0 3, 0 2, 1 2))");
 
     result_ = GEOSIntersection(geom1_, geom2_);
-
-    ensure(!std::fetestexcept(FE_INVALID));
+    
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore
+    //ensure(!std::fetestexcept(FE_INVALID));
 }
 
 
diff --git a/tests/unit/capi/GEOSVoronoiDiagramTest.cpp b/tests/unit/capi/GEOSVoronoiDiagramTest.cpp
index c8843ac..fb3dda1 100644
--- a/tests/unit/capi/GEOSVoronoiDiagramTest.cpp
+++ b/tests/unit/capi/GEOSVoronoiDiagramTest.cpp
@@ -60,8 +60,9 @@ template<>
 template<>
 void object::test<1>
 ()
-{
-    std::feclearexcept(FE_ALL_EXCEPT);
+{   
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore:
+    //std::feclearexcept(FE_ALL_EXCEPT);
 
     geom1_ = GEOSGeomFromWKT("POINT(10 20)");
 
@@ -73,7 +74,8 @@ void object::test<1>
     geom2_ = GEOSVoronoiDiagram(geom1_, nullptr, 0, 1);
     ensure_geometry_equals(geom2_, "MULTILINESTRING EMPTY");
 
-    ensure("FE_INVALID raised", !std::fetestexcept(FE_INVALID));
+    //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore:
+    //ensure("FE_INVALID raised", !std::fetestexcept(FE_INVALID));
 }
 
 //More points:
diff --git a/tests/unit/capi/capi_test_utils.h b/tests/unit/capi/capi_test_utils.h
index 11305e9..7995e3e 100644
--- a/tests/unit/capi/capi_test_utils.h
+++ b/tests/unit/capi/capi_test_utils.h
@@ -30,7 +30,8 @@ namespace capitest {
             wktw_ = GEOSWKTWriter_create();
             GEOSWKTWriter_setRoundingPrecision(wktw_, 10);
 
-            std::feclearexcept(FE_ALL_EXCEPT);
+            //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore:
+            //std::feclearexcept(FE_ALL_EXCEPT);
         }
 
         ~utility()
diff --git a/tests/unit/geom/EnvelopeTest.cpp b/tests/unit/geom/EnvelopeTest.cpp
index b1250a6..ac57bb6 100644
--- a/tests/unit/geom/EnvelopeTest.cpp
+++ b/tests/unit/geom/EnvelopeTest.cpp
@@ -87,15 +87,18 @@ struct test_envelope_data {
             ensure_equals(Envelope::intersects(p0, p1, q), expected);
         }
     }
-
+    
     static void
     ensure_no_fp_except()
     {
+        //PATCH: Commented out all FE_* tests due to emscripten not supporting FE_* identifiers anymore:
+        /*
         ensure("FE_DIVBYZERO raised", !std::fetestexcept(FE_DIVBYZERO));
         //ensure("FE_INEXACT raised", !std::fetestexcept(FE_INEXACT));
         ensure("FE_INVALID raised", !std::fetestexcept(FE_INVALID));
         ensure("FE_OVERFLOW raised", !std::fetestexcept(FE_OVERFLOW));
         ensure("FE_UNDERFLOW raised", !std::fetestexcept(FE_UNDERFLOW));
+        */
     }
 };
 
