Submodule c-blosc contains modified content
diff --git a/c-blosc/blosc/blosc.c b/c-blosc/blosc/blosc.c
index a3d137d..241984f 100644
--- a/c-blosc/blosc/blosc.c
+++ b/c-blosc/blosc/blosc.c
@@ -2212,6 +2212,7 @@ void blosc_atfork_child(void) {
 
 void blosc_init(void)
 {
+  g_initlib = 1;
   /* Return if we are already initialized */
   if (g_initlib) return;
 
diff --git a/c-blosc/blosc/blosc.h b/c-blosc/blosc/blosc.h
index c9dc8ed..c57ef91 100644
--- a/c-blosc/blosc/blosc.h
+++ b/c-blosc/blosc/blosc.h
@@ -48,7 +48,7 @@ extern "C" {
   ((INT_MAX - BLOSC_MAX_TYPESIZE * sizeof(int32_t)) / 3)
 
 /* The maximum number of threads (for some static arrays) */
-#define BLOSC_MAX_THREADS 256
+#define BLOSC_MAX_THREADS 1
 
 /* Codes for shuffling (see blosc_compress) */
 #define BLOSC_NOSHUFFLE   0  /* no shuffle */
diff --git a/setup.py b/setup.py
index 6cbddf4..c76573d 100644
--- a/setup.py
+++ b/setup.py
@@ -5,14 +5,14 @@ from distutils.command.clean import clean
 from distutils.sysconfig import customize_compiler
 from glob import glob
 
-import cpuinfo
+
 from Cython.Distutils.build_ext import new_build_ext as build_ext
 from setuptools import Extension, setup
 from setuptools.errors import CCompilerError, ExecError, PlatformError
 
 # determine CPU support for SSE2 and AVX2
-cpu_info = cpuinfo.get_cpu_info()
-flags = cpu_info.get('flags', [])
+# cpu_info = cpuinfo.get_cpu_info()
+flags = []
 have_sse2 = 'sse2' in flags
 have_avx2 = 'avx2' in flags
 disable_sse2 = 'DISABLE_NUMCODECS_SSE2' in os.environ
@@ -35,8 +35,8 @@ elif os.name == 'posix':
         base_compile_args.append('-mavx2')
 # On macOS, force libc++ in case the system tries to use `stdlibc++`.
 # The latter is often absent from modern macOS systems.
-if sys.platform == 'darwin':
-    base_compile_args.append('-stdlib=libc++')
+# if sys.platform == 'darwin':
+#     base_compile_args.append('-stdlib=libc++')
 
 
 def info(*msg):
@@ -101,7 +101,7 @@ def blosc_extension():
         info('compiling Blosc extension without AVX2 support')
 
     # include assembly files
-    if cpuinfo.platform.machine() == 'x86_64':
+    if False: #cpuinfo.platform.machine() == 'x86_64':
         extra_objects = [
             S[:-1] + 'o' for S in glob("c-blosc/internal-complibs/zstd*/decompress/*amd64.S")
         ]
@@ -143,7 +143,7 @@ def zstd_extension():
     sources = ['numcodecs/zstd.pyx']
 
     # include assembly files
-    if cpuinfo.platform.machine() == 'x86_64':
+    if False: #cpuinfo.platform.machine() == 'x86_64':
         extra_objects = [
             S[:-1] + 'o' for S in glob("c-blosc/internal-complibs/zstd*/decompress/*amd64.S")
         ]
@@ -307,7 +307,7 @@ class ve_build_ext(build_ext):
 
     def run(self):
         try:
-            if cpuinfo.platform.machine() == 'x86_64':
+            if False: #cpuinfo.platform.machine() == 'x86_64':
                 S_files = glob('c-blosc/internal-complibs/zstd*/decompress/*amd64.S')
                 compiler = ccompiler.new_compiler()
                 customize_compiler(compiler)
@@ -331,7 +331,7 @@ class Sclean(clean):
     # Clean up .o files created by .S files
 
     def run(self):
-        if cpuinfo.platform.machine() == 'x86_64':
+        if False: #cpuinfo.platform.machine() == 'x86_64':
             o_files = glob('c-blosc/internal-complibs/zstd*/decompress/*amd64.o')
             for f in o_files:
                 os.remove(f)
