From 582b626493944a3319137f48fb92e4245d5310d0 Mon Sep 17 00:00:00 2001
From: Isabel Paredes <isabel.paredes@quantstack.net>
Date: Tue, 19 Aug 2025 18:21:55 +0200
Subject: [PATCH 14/19] Disable path modifications

---
 libinterp/corefcn/environment.cc | 33 +++++++++++++++++---------------
 1 file changed, 18 insertions(+), 15 deletions(-)

diff --git a/libinterp/corefcn/environment.cc b/libinterp/corefcn/environment.cc
index aecf913..1b44c76 100644
--- a/libinterp/corefcn/environment.cc
+++ b/libinterp/corefcn/environment.cc
@@ -48,26 +48,29 @@ static void append_to_shell_path (const std::string& exec_path)
   // FIXME: should there be a way to remove a previous setting from
   // PATH?
 
-  if (exec_path.empty ())
-    return;
+  // Do not modify PATH with EMSCRIPTEN
+  return;
+
+  // if (exec_path.empty ())
+  //   return;
 
-  // FIXME: should we really be modifying PATH in the environment?
+  // // FIXME: should we really be modifying PATH in the environment?
 
-  std::string shell_path = sys::env::getenv ("PATH");
+  // std::string shell_path = sys::env::getenv ("PATH");
 
-  if (shell_path.empty ())
-    sys::env::putenv ("PATH", exec_path);
-  else
-    {
-      // If PATH doesn't already have exec_path, append it.
-      // FIXME: should we search for the elements individually, and
-      // only append those that are missing?
+  // if (shell_path.empty ())
+  //   sys::env::putenv ("PATH", exec_path);
+  // else
+  //   {
+  //     // If PATH doesn't already have exec_path, append it.
+  //     // FIXME: should we search for the elements individually, and
+  //     // only append those that are missing?
 
-      std::string path_sep = directory_path::path_sep_str ();
+  //     std::string path_sep = directory_path::path_sep_str ();
 
-      if (shell_path.find (exec_path) == std::string::npos)
-        sys::env::putenv ("PATH", shell_path + path_sep + exec_path);
-    }
+  //     if (shell_path.find (exec_path) == std::string::npos)
+  //       sys::env::putenv ("PATH", shell_path + path_sep + exec_path);
+  //   }
 }
 
 octave_value
-- 
2.50.1

