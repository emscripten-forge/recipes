diff --git a/glib/meson.build b/glib/meson.build
index 5c63a4d9a..5820817b7 100644
--- a/glib/meson.build
+++ b/glib/meson.build
@@ -389,8 +389,6 @@ if glib_have_carbon
   platform_deps += [framework_dep]
 endif
 
-glib_sources += files('gthread-@0@.c'.format(threads_implementation))
-
 if enable_dtrace
   glib_dtrace_obj = dtrace_obj_gen.process('glib_probes.d')
   glib_dtrace_hdr = dtrace_hdr_gen.process('glib_probes.d')
@@ -419,7 +417,6 @@ libglib = library('glib-2.0',
     librt,
     libsysprof_capture_dep,
     platform_deps,
-    thread_dep,
   ],
   c_args : glib_c_args,
   objc_args : glib_c_args,
diff --git a/meson.build b/meson.build
index 0060edb92..4c28ab367 100644
--- a/meson.build
+++ b/meson.build
@@ -1991,148 +1991,12 @@ else
 endif
 glib_conf.set('HAVE_IPV6', have_ipv6)
 
-# We need to decide at configure time if GLib will use real atomic
-# operations ("lock free") or emulated ones with a mutex.  This is
-# because we must put this information in glibconfig.h so we know if
-# it is safe or not to inline using compiler intrinsics directly from
-# the header.
-#
-# We also publish the information via G_ATOMIC_LOCK_FREE in case the
-# user is interested in knowing if they can use the atomic ops across
-# processes.
-#
-# We can currently support the atomic ops natively when building GLib
-# with recent versions of GCC or MSVC.
-#
-# Note that the atomic ops are only available with GCC on x86 when
-# using -march=i486 or higher.  If we detect that the atomic ops are
-# not available but would be available given the right flags, we want
-# to abort and advise the user to fix their CFLAGS.  It's better to do
-# that then to silently fall back on emulated atomic ops just because
-# the user had the wrong build environment.
-atomictest = '''int main() {
-  int atomic = 2;
-  __sync_bool_compare_and_swap (&atomic, 2, 3);
-  return 0;
-}
-'''
-
-atomicdefine = '''
-#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-#error "compiler has atomic ops, but doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4"
-#endif
-'''
-
-# We know that we can always use real ("lock free") atomic operations with MSVC
-if cc.get_id() == 'msvc' or cc.get_id() == 'clang-cl' or cc.links(atomictest, name : 'atomic ops')
-  have_atomic_lock_free = true
-  if (cc.get_id() == 'gcc' or host_system == 'emscripten') and not cc.compiles(atomicdefine, name : 'atomic ops define')
-    # Some old releases of GCC or Emscripten provides
-    # __sync_bool_compare_and_swap but doesn't define
-    # __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-    glib_conf.set('__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4', true)
-  endif
-
-  if cc.get_id() == 'gcc' or cc.get_id() == 'clang'
-    sync_swap_test = '''
-      int main() {
-        int atomic = 2;
-        __sync_swap (&atomic, 2);
-        return 0;
-      }
-    '''
-
-    glib_conf.set('_GLIB_GCC_HAVE_SYNC_SWAP', cc.links(sync_swap_test, name : 'sync swap'))
-  endif
-else
-  have_atomic_lock_free = false
-  if host_machine.cpu_family() == 'x86' and cc.links(atomictest, args : '-march=i486')
-    error('GLib must be built with -march=i486 or later.')
-  endif
-endif
+have_atomic_lock_free = false
 glibconfig_conf.set('G_ATOMIC_LOCK_FREE', have_atomic_lock_free)
 
 # === Threads ===
 
-if get_option('force_posix_threads')
-  warning('DEPRECATION: Option \'force_posix_threads\' is deprecated and will be removed after GLib 2.72; please file an issue with your use case if you still require it')
-endif
-
-# Determination of thread implementation
-if host_system == 'windows' and not get_option('force_posix_threads')
-  thread_dep = []
-  threads_implementation = 'win32'
-  glibconfig_conf.set('g_threads_impl_def', 'WIN32')
-  glib_conf.set('THREADS_WIN32', 1)
-else
-  thread_dep = dependency('threads')
-  threads_implementation = 'posix'
-  pthread_prefix = '''
-      #ifndef _GNU_SOURCE
-      # define _GNU_SOURCE
-      #endif
-      #include <pthread.h>'''
-  glibconfig_conf.set('g_threads_impl_def', 'POSIX')
-  glib_conf.set('THREADS_POSIX', 1)
-  if cc.has_header_symbol('pthread.h', 'pthread_attr_setstacksize')
-    glib_conf.set('HAVE_PTHREAD_ATTR_SETSTACKSIZE', 1)
-  endif
-  if cc.has_header_symbol('pthread.h', 'pthread_attr_setinheritsched')
-    glib_conf.set('HAVE_PTHREAD_ATTR_SETINHERITSCHED', 1)
-  endif
-  if cc.has_header_symbol('pthread.h', 'pthread_condattr_setclock')
-    glib_conf.set('HAVE_PTHREAD_CONDATTR_SETCLOCK', 1)
-  endif
-  if cc.has_header_symbol('pthread.h', 'pthread_cond_timedwait_relative_np')
-    glib_conf.set('HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE_NP', 1)
-  endif
-  if cc.has_header_symbol('pthread.h', 'pthread_getname_np', prefix : pthread_prefix)
-    glib_conf.set('HAVE_PTHREAD_GETNAME_NP', 1)
-  endif
-  if cc.has_header_symbol('pthread.h', 'pthread_getaffinity_np', prefix : pthread_prefix)
-    glib_conf.set('HAVE_PTHREAD_GETAFFINITY_NP', 1)
-  endif
-
-  # Assume that pthread_setname_np is available in some form; same as configure
-  if cc.links(pthread_prefix + '''
-              int main() {
-                pthread_setname_np("example");
-                return 0;
-              }''',
-              name : 'pthread_setname_np(const char*)',
-              dependencies : thread_dep)
-    # macOS and iOS
-    glib_conf.set('HAVE_PTHREAD_SETNAME_NP_WITHOUT_TID', 1)
-  elif cc.links(pthread_prefix + '''
-                int main() {
-                  pthread_setname_np(pthread_self(), "example");
-                  return 0;
-                }''',
-                name : 'pthread_setname_np(pthread_t, const char*)',
-                dependencies : thread_dep)
-    # Linux, Solaris, etc.
-    glib_conf.set('HAVE_PTHREAD_SETNAME_NP_WITH_TID', 1)
-  elif cc.links(pthread_prefix + '''
-                int main() {
-                  pthread_setname_np(pthread_self(), "%s", "example");
-                  return 0;
-                }''',
-                name : 'pthread_setname_np(pthread_t, const char*, void*)',
-                dependencies : thread_dep)
-    # NetBSD
-    glib_conf.set('HAVE_PTHREAD_SETNAME_NP_WITH_TID_AND_ARG', 1)
-  elif cc.links(pthread_prefix + '''
-                #include <pthread_np.h>
-                int main() {
-                  pthread_set_name_np(pthread_self(), "example");
-                  return 0;
-                }''',
-                name : 'pthread_set_name_np(pthread_t, const char*)',
-                dependencies : thread_dep)
-    # FreeBSD, DragonFlyBSD, OpenBSD, etc.
-    glib_conf.set('HAVE_PTHREAD_SET_NAME_NP', 1)
-  endif
-endif
+thread_dep = []
 
 # FIXME: we should make it print the result and always return 0, so that
 # the output in meson shows up as green
