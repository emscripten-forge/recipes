From 736079b90835294aa35b281509472c181238753d Mon Sep 17 00:00:00 2001
From: martinRenou <martin.renou@gmail.com>
Date: Mon, 10 Jul 2023 15:53:01 +0200
Subject: [PATCH 1/1] Patch asyncio tornado

---
 IPython/__init__.py | 62 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 60 insertions(+), 2 deletions(-)

diff --git a/IPython/__init__.py b/IPython/__init__.py
index 3322562a1..3eee0c7d2 100644
--- a/IPython/__init__.py
+++ b/IPython/__init__.py
@@ -1,3 +1,61 @@
+
+import asyncio
+import types
+import sys
+
+def mock_tornado():
+    """This is needed for some Matplotlib backends (webagg, ipympl) and plotly"""
+
+    # Appease plotly -> tenacity -> tornado.gen usage
+    gen = sys.modules["tornado.gen"] = types.ModuleType("gen")
+    gen.coroutine = lambda *args, **kwargs: args[0]
+    gen.sleep = lambda *args, **kwargs: None
+    gen.is_coroutine_function = lambda *args: False
+
+    tornado = sys.modules["tornado"] = types.ModuleType("tornado")
+    tornado.gen = gen
+
+def patch_asyncio():
+    def exception_handler(event_loop,context):
+        exception = context['exception']
+        traceback.print_exception(exception)
+
+    asyncio.get_event_loop().set_exception_handler(exception_handler)
+
+    from .core.async_helpers import _AsyncIORunner
+
+    def asyncio_call(self, coro):
+        import pyjs
+
+        task = asyncio.ensure_future(coro)
+
+        def py_callback(resolve, reject):
+            def done_cb(f):
+                r = f.result()
+                pyjs.js.console.log("resolving")
+                if not r.success:
+                    resolve()
+                    raise r.error_in_exec
+                else:
+                    resolve()
+            task.add_done_callback(done_cb)
+
+        raw_js_py_callback = pyjs.JsValue(py_callback)
+        js_py_callback = raw_js_py_callback['__usafe_void_val_val__'].bind(raw_js_py_callback)
+        js_promise = pyjs.js.Promise.new(js_py_callback)
+
+        pyjs.js.globalThis.toplevel_promise = js_promise
+        pyjs.js.globalThis.toplevel_promise_py_proxy = raw_js_py_callback
+
+        return task
+
+    _AsyncIORunner.__call__ = asyncio_call
+
+
+mock_tornado()
+patch_asyncio()
+
+
 # PYTHON_ARGCOMPLETE_OK
 """
 IPython: tools for interactive and parallel computing in Python.
@@ -89,13 +147,13 @@ def embed_kernel(module=None, local_ns=None, **kwargs):
         allowing configuration of the kernel (see :ref:`kernel_options`).  Will only have an effect
         on the first embed_kernel call for a given process.
     """
-    
+
     (caller_module, caller_locals) = extract_module_locals(1)
     if module is None:
         module = caller_module
     if local_ns is None:
         local_ns = caller_locals
-    
+
     # Only import .zmq when we really need it
     from ipykernel.embed import embed_kernel as real_embed_kernel
     real_embed_kernel(module=module, local_ns=local_ns, **kwargs)
-- 
2.41.0

