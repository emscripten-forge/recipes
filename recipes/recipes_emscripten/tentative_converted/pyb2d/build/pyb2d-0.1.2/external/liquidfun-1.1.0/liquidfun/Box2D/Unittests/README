Unit tests for LiquidFun:
---- ----- --- ----------

This directory contains a set of unit tests to run on LiquidFun.
It leverages google's "gtest" framework.

Along with just using the standard framework, it provides an infrastructure
that is particularly well-suite to testing in the context of simulations:
It allows for the tracking, recording and comparing the b2Body objects'
properties (i.e. position, angle, world/local center and linear/angular
velocity) as the simulation runs.  A test is set up by the user generating a
"baseline" file that contains the bodies' properties over time. These
baselines are checked in with the software. When the tests are run, the
simulations' results are compared with the checked-in values. The test passes
if the values are within some user-specified tolerance.

There is a class called the "BodyTracker", that maintains these samples and
performs the appropriate comparisons.  Please see the header file for usage
information.


For build Instructions, see Box2D/Documentation/Building.txt.

Running the Tests:

To run the tests, you simply must type the name of the executable. As an
example, here is what you will see if the test runs successfully (example from
HelloWorldTests):

% bin/HelloWorldTests
[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from HelloWorldTests
[ RUN      ] HelloWorldTests.Allocation
[       OK ] HelloWorldTests.Allocation (0 ms)
[ RUN      ] HelloWorldTests.PositionAngleTest
[       OK ] HelloWorldTests.PositionAngleTest (2 ms)
[----------] 2 tests from HelloWorldTests (2 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran. (2 ms total)
[  PASSED  ] 2 tests.

----------------------------

And when an error occurs in a test, the output will look something like this:

% bin/HelloWorldTests
[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from HelloWorldTests
[ RUN      ] HelloWorldTests.Allocation
[       OK ] HelloWorldTests.Allocation (0 ms)
[ RUN      ] HelloWorldTests.PositionAngleTest
liquidfun/Box2D/Unittests/HelloWorldTests.cpp:110: Failure
Value of: matched
  Actual: false
Expected: true
	Mismatch of body 'DynamicBody' at time 1
		baseline file = baselines/HelloWorldPositionAngle.txt
		generated file = HelloWorldPositionAngle.txt

[  FAILED  ] HelloWorldTests.PositionAngleTest (1 ms)
[----------] 2 tests from HelloWorldTests (2 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran. (2 ms total)
[  PASSED  ] 1 test.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] HelloWorldTests.PositionAngleTest

 1 FAILED TEST

----------------------------

Making a Baseline:

Obviously, the first time you run the unit test program, it will fail because
no baseline exists.  Once this happens, you simply copy the generated file into
where the baseline file is supposed to be and run the program again. Of course,
it should just work given that you had JUST generated what is now the baseline
file.

----------------------------

Maintaining a Test:

If a test fails, one of two things can be true: the test demonstrates that a
bug was introduced or system behavior was changed in an expected way.  If it
is the latter, you probably need to update the baseline.

Every time that a test is run with a BodyTracker, it writes out the generated
tracked values, even if it wasn't necessary. To update the test baseline, all
you will need to do is copy over that generated file to the baseline.  Note
that the test output will also contain the names of each of these files.

----------------------------

Enjoy!
