context:
  version: 3.4.2
  am_version: 1.15


package:
  name: libffi
  version: '{{ version }}'

source:
  sel(not emscripten32): 
    url: https://github.com/libffi/libffi/releases/download/v{{ version }}/libffi-{{ version }}.tar.gz
    sha256: 540fb721619a6aba3bdeef7d940d8e9e0e6d2c193595bc243241b77ff9e93620
  sel(emscripten32): 
    git_url: https://github.com/hoodmane/libffi-emscripten
    git_rev: d6666df2a2820e0548a66166021ddae04a11a2db

  patches:
    - sel(not emscripten32): 0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch
    - sel(not emscripten32): 0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch
    - sel(win): 0002-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch 

build:
  number: 0
  # run_exports:
  #   # good history: https://abi-laboratory.pro/tracker/timeline/libffi/
  #   - "{{ pin_subpackage('libffi', "x.x") }}"


requirements:
  build:
    - sel(emscripten): python 3.10
    - sel(win):  autotools_clang_conda            
    - sel(unix): make                             
    - sel(unix): autoconf                         
    - sel(unix): libtool                          
    - sel(unix): patch                            
    - sel(unix): automake      
    - sel(win):  m2-textinfo
    - sel(unix and not emscripten): texinfo
    - sel(unix or emscripten): '{{ compiler("cxx") }}'




about:
  home: https://sourceware.org/libffi/
  license: MIT
  license_file: LICENSE
  summary: A Portable Foreign Function Interface Library.

  description: |
    The libffi library provides a portable, high level programming interface
    to various calling conventions. This allows a programmer to call any
    function specified by a call interface description at run-time.
  doc_url: https://sourceware.org/libffi/
  dev_url: https://github.com/libffi/libffi

extra:
  recipe-maintainers:
    - stefan-balke
    - scopatz
    - isuruf
