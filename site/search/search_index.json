{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Emscripten-forge is a GitHub organization/repository containing  conda recipes for the <code>emscripten-wasm32</code> platform. Conda-forge does not (yet) support the <code>emscripten-wasm32</code> platform. <code>emscripten-forge</code> fills this gap by providing a channel with conda packages for the <code>emscripten-wasm32</code> platform. The recipes repository not only stores the recipe files for multiple packages, but it also builds and uploads these packages to the <code>emscripten-forge</code> channel on prefix.dev</p>"},{"location":"#_2","title":"Home","text":""},{"location":"#development","title":"Development","text":"<ul> <li>Adding packages</li> <li>Recipe format</li> <li>Local builds</li> <li>Conda build config</li> <li>Troubleshooting</li> </ul>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Installing packages</li> <li>JupyterLite</li> <li>Package server</li> </ul>"},{"location":"#project","title":"Project","text":"<ul> <li>Blog</li> <li>Related projects</li> <li>FAQ</li> <li>Credits</li> </ul>"},{"location":"blog/2024/05/10/local-builds-with-pixi/","title":"Local builds with <code>pixi</code>","text":"<p>Setting up a local build environment for emscripten-forge used to be a very complicated process with many dependencies and many steps. But with the usage  of pixi this has become trivial!</p> <pre><code># this only needs to be done once\npixi run setup\n\n# thats it! packages can now be built\npixi run build-emscripten-wasm32-pkg recipes/recipes_emscripten/regex\n</code></pre>"},{"location":"blog/2024/05/10/goodby-boa-welcome-rattler-build/","title":"Goodby boa, welcome rattler-build","text":"<p>When emscripten-forge was started, we relied on <code>https://github.com/mamba-org/boa</code> which is a conda-build like tool but  using more of mamba then conda. This was always a bit brittle and we had to maintain a fork of <code>boa</code> to make it work with <code>emscripten-wasm32</code>. Testing did not work at all, because test dependencies could only be specified for the <code>target_platform</code> and not for the <code>host_platform</code>, ie only for emscripten-wasm32 and not for linux-64 (or any other host platform). This means there was no sane way to install the \"emulators\" to run the wasm code on the host platform. Also the error messages were not very helpful and the code was hard to understand.</p> <p>But then there came rattler-build which is a complete rewrite of <code>boa</code> / <code>conda-build</code> in rust which is faster, has barely any dependencies, and has easy to understand error messages. And to make it even better, test dependencies can be specified for the host platform and the target platform! This means we can now install the pyjs-code-runner which can be used to run wasm in a headless browser.</p> <p>This allows to have a proper test section in the recipe.yaml file like in the regex recipe:</p> <pre><code>tests:\n  - script: pytester\n    requirements:\n      build:\n        - pytester\n      run:\n        - pytester-run\n    files:\n      recipe:\n        - test_regex.py\n</code></pre> <p>Today we have removed <code>boa</code> support from this repository and are now using only <code>rattler-build</code>.</p>"},{"location":"blog/2024/05/24/emscripten-is-now-a-proper-package/","title":"Emscripten is now a proper package","text":"<p>So far, the emscripten package was a bit of a hack. It relied on a text file <code>~.emsdkdir</code> in the home directory which contained the directory of the emscripten installation. This was not very nice, because it was hard to build packages for several emscripten versions.</p> <p>But now, emscripten is a repacked package that installs emscripten into the conda environment. This allows in principle to compile packages for multiple emscripten versions.</p>"},{"location":"blog/2024/05/10/rustpyo3-support/","title":"Rust/PyO3 Support","text":"<p>Finally, we have added support for Rust/PyO3/maturin packages. This allows to build packages like * cryptography, pydantic-core and pycrdt.</p>"},{"location":"blog/2025/04/30/major-updates/","title":"Major updates","text":""},{"location":"blog/2025/04/30/major-updates/#we-moved-to-prefixdev","title":"We moved to prefix.dev","text":"<p>When emscripten-forge started, packages where build hosted on a quetz packge server. Now we moved to prefix.dev</p>"},{"location":"blog/2025/04/30/major-updates/#we-changed-the-default-compiler","title":"We changed the default compiler","text":"<p>We changed the default emscripten-compiler we use to 3.1.73. Before that we used 3.1.45. Its a bit unfortunate that emscripten 4 landed in the middle of this release. </p>"},{"location":"blog/2025/04/30/major-updates/#we-changed-the-default-python-version-to-313","title":"We changed the default python version to 3.13","text":"<p>We changed the default python version to 3.13. Before that we used 3.11</p>"},{"location":"development/adding_packages/","title":"Adding packages","text":"<p>To add a new package to emscripten-forge, just create a Pull Request in this repository. The recipe format is described in the rattler-build recipe format</p>"},{"location":"development/adding_packages/#cc-packages","title":"C/C++ Packages","text":""},{"location":"development/adding_packages/#cmake","title":"CMake","text":"<p>Adding cmake based packages is easy. Usually it is enough to replace the <code>cmake</code> command with the <code>emcmake</code> command and <code>make</code> with <code>emmake</code> (see the emscripten documentation for more details).</p> <p>To build a shared library with CMake, one needs  flags. These flags can be put into a <code>.cmake</code> file: <pre><code># overwriteProp.cmake\nset_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE) # does not need to be global :)\nset(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS \"-s SIDE_MODULE=1\")\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS \"-s SIDE_MODULE=1\")\nset(CMAKE_STRIP FALSE)  # used by default in pybind11 on .so modules # only for needed when using pybind11\n</code></pre></p> <p>This can be passed to the as command line argument to cmake <pre><code># CLI\n... -DCMAKE_PROJECT_INCLUDE=overwriteProp.cmake\n</code></pre></p> <p>Example recipes:</p> <ul> <li>xeus</li> <li>xeus-javascript</li> <li>sqlitecpp</li> </ul>"},{"location":"development/adding_packages/#configure-make","title":"Configure / Make","text":"<p>Usually it is enough to replace the <code>./configure</code> command with the <code>emconfigure ./configure</code> (see the emscripten documentation for more details).</p>"},{"location":"development/adding_packages/#python-packages","title":"Python Packages","text":""},{"location":"development/adding_packages/#pip-setuptools","title":"pip / setuptools","text":"<p>For a simple package, only these requirements are usually necessary:</p> <pre><code>requirements:\n  build:\n    - python\n    - cross-python_${{ target_platform }}\n    - ${{ compiler(\"c\") }}\n    - pip\n  host:\n    - python\n  run:\n    - python\n</code></pre> <p>Example recipes:</p> <ul> <li>regex</li> </ul>"},{"location":"development/adding_packages/#meson","title":"meson","text":"<p>For a meson package, the following requirements are usually needed.</p> <p><pre><code>requirements:\n  build:\n  - ${{ compiler('cxx') }}\n  - cross-python_${{target_platform}}\n  - meson-python\n  - pip &gt;=24\n  host:\n  - python\n</code></pre> Furthermore, an <code>emscripten.meson.cross</code> file is necessary to set the correct compiler and flags for cross compilation.</p> <pre><code># binaries section is at the end to be able to append the python binary.\n\n[properties]\nneeds_exe_wrapper = true\nskip_sanity_check = true\nlongdouble_format = 'IEEE_QUAD_LE' # for numpy\n\n[host_machine]\nsystem = 'emscripten'\ncpu_family = 'wasm32'\ncpu = 'wasm'\nendian = 'little'\n\n[binaries]\nexe_wrapper = 'node'\npkgconfig = 'pkg-config'\n</code></pre> <p>In the build script, we append the python binary to the .cross file and pass this .cross file to the pip command.</p> <pre><code>#!/bin/bash\n\ncp $RECIPE_DIR/emscripten.meson.cross $SRC_DIR\necho \"python = '${PYTHON}'\" &gt;&gt; $SRC_DIR/emscripten.meson.cross\n\n${PYTHON} -m pip install . -vvv --no-deps --no-build-isolation \\\n    -Csetup-args=\"--cross-file=$SRC_DIR/emscripten.meson.cross\"\n</code></pre> <p>Example recipes:</p> <ul> <li>contourpy</li> <li>numpy</li> </ul>"},{"location":"development/adding_packages/#rust","title":"rust","text":"<p>Building rust packages with PyO3 / maturin typically works out of the box.</p> <p>For a maturin / cffi / pyo3 package, the following requirements are usually necessary:</p> <pre><code>requirements:\n  build:\n  - cross-python_${{ target_platform }}\n  - cffi == 1.15.1 (# at the time of writing pinning cffi == 1.15.1 is necessary, may change in the future)\n  - setuptools-rust\n  - rust\n  - maturin\n\n  host:\n  - python\n  # at the time of writing pinning cffi == 1.15.1 is necessary, may change in the future)\n  - cffi == 1.15.1\n  run:\n  # at the time of writing pinning cffi == 1.15.1 is necessary, may change in the future)\n  - cffi == 1.15.1\n</code></pre> <p>Example recipes:</p> <ul> <li>cryptography</li> <li>pydantic-core</li> <li>pycrdt</li> </ul>"},{"location":"development/conda_build_config/","title":"Conda build config","text":"<p>Similar to conda-forge, we globally pin packages. This is essentially a list of packages and versions such as</p> <pre><code># ...\nnumpy:\n  - 1.25.2\nocct:\n  - '7.5'\nopenblas:\n  - 0.3.*\nopenexr:\n  - 2.5\nopenjpeg:\n  - '2.4'\nopenmpi:\n  - 4\nopenssl:\n  - 1.1.1\nopenturns:\n  - '1.18'\norc:\n  - 1.7.2\n# ...\n</code></pre> <p>This list is used to pin the versions of the dependencies in the <code>recipe.yaml</code> of recipes.</p> <p>Therefore, instead of writing</p> <pre><code>requirements:\n  host:\n    - numpy 1.25.2\n  run:\n    - numpy 1.25.2\n</code></pre> <p>we can write</p> <p><pre><code>requirements:\n  host:\n    - numpy\n  run:\n    - numpy\n</code></pre> Furthermore, this build-config specifies which compiler to use for each platform. While conda-forge build configuration can be found here, we need to maintain our own conda-build-config. In particular, we need to set up the emscripten compiler.</p> <p>Note</p> <p>The conda-build-config of emscripten-forge uses the rattler-recipes format</p> <pre><code>cxx_compiler:\n  - if: emscripten\n    then:\n      - emscripten\n  - if: linux\n    then:\n      - gxx\n  - if: osx\n    then:\n      - clangxx\n</code></pre>"},{"location":"development/local_builds/","title":"Local builds","text":""},{"location":"development/local_builds/#local-with-pixi","title":"Local with <code>pixi</code>","text":"<p>To build a package locally, the easiest way is to use <code>pixi</code> (see /pixi.sh/latest/#installation for installation instructions). Under the hood, <code>pixi</code> uses <code>rattler-build</code> to build the package.</p> <pre><code># this only needs to be done once\npixi run setup\n\n# this builds the package\npixi run build-emscripten-wasm32-pkg recipes/recipes_emscripten/regex\n</code></pre>"},{"location":"development/local_builds/#local-builds-with-rattler-build","title":"Local builds with <code>rattler-build</code>","text":"<p>We recommend using the <code>pixi</code> command to build packages locally. However, if you want to use <code>rattler-build</code> directly, you can do so with the following steps:</p>"},{"location":"development/local_builds/#create-the-environment","title":"Create the environment","text":"<p>Create a new conda environment from <code>ci_env.yml</code> and install playwright in this environment:  On a Linux / MacOS this can be done with: <pre><code>micromamba create -n emscripten-forge -f ci_env.yml --yes\nmicromamba activate emscripten-forge\n</code></pre></p> <p>All further steps should be executed in this environment. I.e. if you open a new terminal, you have to activate the environment again with <code>micromamba activate emscripten-forge</code>.</p>"},{"location":"development/local_builds/#setup-emsdk","title":"Setup emsdk","text":"<p>We currently need a patched version of emsdk. This is because emscripten had some regressions in the <code>3.1.45</code> release wrt. dynamic loading of shared libraries. We use the <code>./emsdk/setup_emsdk.sh</code> which takes  two arguments: the emsdk version and the path where emsdk should be installed.  In this example we choose <code>~/emsdk</code> as the installation path. You have to use version <code>3.1.45</code>.</p> <pre><code>./emsdk/setup_emsdk.sh 3.1.45 ~/emsdk\n</code></pre>"},{"location":"development/local_builds/#build-compiler-packages-meta-packages","title":"Build compiler packages / meta packages:","text":"<p>This is only needed for MacOS. On Linux, the compiler packages are already built and available in the <code>emscripten-forge</code> channel.</p> <pre><code>rattler-build build --recipe recipes/recipes/emscripten_emscripten-wasm32/recipe.yaml   -c https://repo.mamba.pm/emscripten-forge -c conda-forge -c microsoft -m conda_build_config.yaml\nrattler-build build --recipe recipes/recipes/cross-python_emscripten-wasm32/recipe.yaml -c https://repo.mamba.pm/emscripten-forge -c conda-forge -c microsoft -m conda_build_config.yaml\nrattler-build build --recipe recipes/recipes/pytester/recipe.yaml                       -c https://repo.mamba.pm/emscripten-forge -c conda-forge -c microsoft -m conda_build_config.yaml\n</code></pre>"},{"location":"development/local_builds/#build-packages-with-rattler-build","title":"Build packages with <code>rattler-build</code>:","text":"<pre><code>rattler-build build  --recipe recipes/recipes_emscripten/regex/recipe.yaml  --target-platform=emscripten-wasm32 -c https://repo.mamba.pm/emscripten-forge -c conda-forge -c microsoft -m conda_build_config.yaml\n</code></pre>"},{"location":"development/recipe_format/","title":"Recipe format","text":"<p>Typically, a recipe is a directory with a <code>recipe.yaml</code> file that contains the information needed to build a package and optionally an additional <code>build.sh</code> script that is executed during the build process.</p>"},{"location":"development/recipe_format/#recipeyaml","title":"recipe.yaml","text":"<p>The recipe.yaml file may look like this: <pre><code>context:\n  version: \"2022.1.18\" # the version of the package\n  name: \"regex\"        # the name of the package\n\npackage:\n  name: ${{ name }}          # use the context variables defined above\n  version: ${{ version }}    # use the context variables defined above\n\nsource:\n  # the url is formed from a \"template\" with the context variables\n  url: https://pypi.io/packages/source/r/${{ name }}/${{ name }}-${{ version }}.tar.gz\n  sha256: 97f32dc03a8054a4c4a5ab5d761ed4861e828b2c200febd4e46857069a483916\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - python\n    - cross-python_${{ target_platform }}\n    - ${{ compiler(\"c\") }}\n    - pip\n  host:\n    - python\n  run:\n    - python\n\n# to test a python package, we need to use the pytester package.\n# this will run pytests in a headless browser\ntests:\n  - script: pytester\n    requirements:\n      build:\n        - pytester\n      run:\n        - pytester-run\n    files:\n      recipe:\n        - test_regex.py\n\n\nabout:\n  homepage: https://bitbucket.org/mrabarnett/mrab-regex\n  license: Apache-2.0\n  summary: Alternative regular expression module, to replace re\n\nextra:\n  recipe-maintainers:\n    - DerThorsten\n</code></pre></p>"},{"location":"development/recipe_format/#buildsh","title":"build.sh","text":"<p>The bash script may look like this: <pre><code>#!/bin/bash\n\nexport LDFLAGS=\"-s MODULARIZE=1  -s LINKABLE=1  -s EXPORT_ALL=1 -s WASM=1 -std=c++14 -s SIDE_MODULE=1 -sWASM_BIGINT\"\n${PYTHON} -m pip install .\n</code></pre></p>"},{"location":"development/troubleshooting/","title":"Troubleshooting","text":"<p>Compiling for emscripten-wasm32 is a complex task. This section provides some tips and tricks to help you troubleshoot common issues.</p>"},{"location":"development/troubleshooting/#buildtime-errors","title":"Buildtime errors","text":"<p>This section is still empty, feel free to contribute by opening a pull request.</p>"},{"location":"development/troubleshooting/#runtime-errors","title":"Runtime errors","text":""},{"location":"development/troubleshooting/#pylong_fromlonglong-imported-function-does-not-match-the-expected-type","title":"<code>PyLong_FromLongLong</code>: imported function does not match the expected type","text":"<p>When facing an error at runtime while importing a shared-library / python-package like the following: <pre><code> LinkError: WebAssembly.instantiate():\n    function=\"PyLong_FromLongLong\":\n    imported function does not match the expected type\n</code></pre> or an error message containing <code>*LongLong</code> or similar wording, it is likely that the linker flag <code>-s WASM_BIGINT</code> is missing.</p>"},{"location":"project/credits/","title":"Credits","text":""},{"location":"project/credits/#pyodide","title":"Pyodide","text":"<p>This project is heavily inspired by the pyodide project. Many recipes, build scripts, and patches are heavily inspired by the pyodide project. Many thanks to the pyodide team for their work.</p>"},{"location":"project/credits/#conda-forge","title":"Conda Forge","text":"<p>Many thanks to the conda-forge team for their work. Many recipes, build scripts, and patches are heavily inspired by the conda-forge project.</p>"},{"location":"project/credits/#contributors","title":"Contributors","text":"<p>This project has been started by Thorsten Beier and Wolf Vollprecht. Many other have contributed to the project. Many thanks to all the contributors of the emscripten-forge project.</p>"},{"location":"project/faq/","title":"FAQ","text":"<p>This section is relatively empty, feel free to contribute by opening a pull request.</p>"},{"location":"project/faq/#what-is-the-difference-between-emscripten-forge-and-pyodide","title":"What is the difference between emscripten-forge and pyodide?","text":"<p>Pyodide is a full python distribution for <code>emscripten-wasm32</code> running in the browser. Therefore all packages are either python packages or shared libraries needed by python packages. Emscripten-forge on the other hand is a conda channel providing packages for the <code>emscripten-wasm32</code> platform. This means there is a great overlap in the provided python packages, but emscripten-forge also  provided non-python packages for the <code>emscripten-wasm32</code> platform. Furthermore pyodide lives in the <code>pip</code> ecosystem, while emscripten-forge lives in the <code>conda/mamba/rattler</code> ecosystem.</p>"},{"location":"project/related_projects/","title":"Related Projects","text":""},{"location":"project/related_projects/#pyodide","title":"Pyodide","text":"<p>Pyodide is a Python distribution for the browser and Node.js based on WebAssembly. Emscripten-forge would not have been possible without the pioneering work of the pyodide team. Many aspects of this project are heavily inspired by the pyodide project. This includes the build scripts and many of the patches which have been taken from the pyodide packages.</p>"},{"location":"project/related_projects/#pyjs","title":"pyjs","text":"<p>pyjs is modern pybind11 + emscripten Embind based Python &lt;-&gt; JavaScript foreign function interface (FFI) for wasm/emscripten compiled Python. The API is loosely based on the FFI of pyodide.</p>"},{"location":"project/related_projects/#pyjs-code-runner","title":"pyjs-code-runner","text":"<p>pyjs-code-runner is a \"driver\" to run python code in a wasm environment, almost like running vanilla python code. This is used to run the tests of the emscripten-forge packages.</p>"},{"location":"project/related_projects/#jupyterlite","title":"JupyterLite","text":"<p>JupyterLite is a JupyterLab distribution that runs entirely in the browser built from the ground-up using JupyterLab components and extensions.</p>"},{"location":"project/related_projects/#jupyterlite-xeus","title":"JupyterLite Xeus","text":"<p>jupyterlite-xeus is a package/jupyterlite extension to use xeus-kernels and packages from emscripten-forge in a jupyterlite environment.</p>"},{"location":"project/related_projects/#rattler-build","title":"rattler-build","text":"<p>rattler-build is used to build the emscripten-forge packages</p>"},{"location":"project/related_projects/#pixi","title":"pixi","text":"<p>pixi is a package management tool for developers. It allows the developer to install libraries and applications in a reproducible way. Emscripten-forge uses pixi to setup the environment for building the packages.</p>"},{"location":"project/related_projects/#quetz","title":"Quetz","text":"<p>Quetz is an open source conda package server. It is used to host the emscripten-forge packages.</p>"},{"location":"usage/installing_packages/","title":"Installing packages","text":""},{"location":"usage/installing_packages/#install-packages-with-micromamba","title":"Install packages with micromamba","text":"<p>We recommend using micromamba to install packages from this channel. To install micromamba itself, follow the instructions in the micromamba documentation.</p> <p>To install packages from this channel, use the following command:</p> <pre><code>micromamba create -n my-channel-name \\\n    --platform=emscripten-wasm32 \\\n    -c https://repo.prefix.dev/emscripten-forge-dev\\\n    -c https://repo.prefix.dev/conda-forge \\\n    --yes \\\n    python numpy scipy matplotlib\n</code></pre> <p>All noarch packages are installed from the <code>conda-forge</code> channel, all packages compiled for the <code>emscripten-wasm32</code> platform are provided via the <code>emscripten-forge</code> channel.</p>"},{"location":"usage/jupyterlite/","title":"JupyterLite Xeus","text":""},{"location":"usage/jupyterlite/#installation","title":"Installation","text":"<p>To consume emscripten-forge packages in a JupyterLite environment, the <code>jupyterlite_xeus</code> package needs to be installed. This can be done with <code>pip</code></p> <p><pre><code>pip install jupyterlite_xeus\n</code></pre> or <code>conda</code>/<code>mamba</code>/<code>micromamba</code></p> <pre><code>mamba install jupyterlite-xeus\n</code></pre>"},{"location":"usage/jupyterlite/#usage","title":"Usage","text":"<p>Note</p> <p>Emscripten-forge provides xeus kernels for multiple languages, this document focuses on the Python kernel, namely <code>xeus-python</code>. While the other kernels can also be installed as described below, adding custom packages is only supported for the <code>xeus-python</code> kernel at the moment.</p>"},{"location":"usage/jupyterlite/#from-environment-file","title":"From environment file","text":"<p>To load a xeus-python kernel with a custom environment, create an environment.yaml file with xeus-python and the desired dependencies. Here is an example with numpy as a additional dependency: <pre><code>name: xeus-lite-wasm\nchannels:\n  - https://repo.prefix.dev/emscripten-forge-dev\n  - https://repo.prefix.dev/conda-forge\ndependencies:\n  - xeus-python\n  - numpy\n</code></pre></p> <p>To build JupyterLite, run the following command where environment.yaml is the path to the file you just created</p> <pre><code>jupyter lite build --XeusAddon.environment_file=some_path/to/environment.yaml\n</code></pre>"},{"location":"usage/jupyterlite/#from-prefix","title":"From prefix","text":"<p>Create a environment with the desired packages. Here is an example with numpy as a additional dependency</p> <pre><code>micromamba create\n    -n myenv \\\n    --platform=emscripten-wasm32 \\\n    -c https://repo.mamba.pm/emscripten-forge \\\n    -c conda-forge \\\n    --yes \\\n    \"python&gt;=3.11\"  numpy pandas xeus-python\n</code></pre> <p>Use the following command to build JupyterLite.</p> <pre><code>jupyter lite build --XeusAddon.prefix=$MAMBA_ROOT_PREFIX/envs/myenv\n</code></pre>"},{"location":"usage/package_server/","title":"Package Server","text":"<p>Emscripten-forge packages are hosted on  prefix.dev.</p> <p>Note</p> <p>To use emscripten-forge conda packages, you need to add the <code>emscripten-forge</code> channel to your conda configuration or use the <code>--channel</code> flag when installing packages, ie:</p> <pre><code>micromamba create -n myenv --platform=emscripten-wasm32 \\\n    -c https://prefix.dev/channels/emscripten-forge-dev \\\n    -c conda-forge \\\n    python numpy\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""}]}